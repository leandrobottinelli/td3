     1                                  ;Pasos del programa:
     2                                  ;---------------------------------------------------------------------------------------
     3                                    ; Entro a modo_proteg
     4                                    ; Copio la funcion copy en rutinas(RAM)
     5                                    ; Llamo a la funcion copy para que me copie la ROM a nucleo (RAM)
     6                                  
     7                                    ; Espero interrupcion de tecla, mientras tengo el flag desactivado
     8                                    ; Espero interrupcion de timer, mientras tengo el flag desactivado
     9                                  
    10                                    ; Si el flag fue de timer:
    11                                    ; Incremento el CONTADOR_TIMER cada vez que se activa el flag (10 ms)
    12                                    ; Cuando llego a las 10 veces, Incremento _CONTADOR_TIMER_2 
    13                                    ; Logro contar cuantas veces paso 100 ms
    14                                  
    15                                    ; Si el flag fue de teclado:
    16                                    ; Cuando se produce la interrucion, la isr correspondiente activa el flag
    17                                    ; LLamo a la funcion LECTURA_TECLA y obtengo el codigo de la tecla
    18                                    ; En el main comparo cada caso, solo validando teclas con valores en hexa
    19                                    ; Si la tecla es valida, la guardo en un vector 16 posiciones, al comienzo de la tabla.
    20                                    ; Cuando se presiona la tecla enter, dejo de guardar teclas.
    21                                    ; Si el numero de teclas es 16 o mas, las guardo desde la primera como la MSB hasta la ultima.
    22                                    ; Si es menor a 16, hago lo mismo pero rellenando con ceros adelante.
    23                                    ; Previo compruebo si es par o impar.
    24                                    ; Voy guardando cada vector de teclas, ya acomodados uno debajo de otro en la tabla.
    25                                  
    26                                    ; NOTA: Las teclas las paso a traves de la pila 
    27                                    ; Falta acomodar, si se excede de 16 teclas el orden de como se guarda
    28                                    ; Falta arreglar si tocan una sola tecla
    29                                  ;-----------------------------------------------------------------------------------
    30                                  
    31                                  
    32                                  EXTERN __FIN_PILA
    33                                  EXTERN __SIZE_PILA
    34                                  
    35                                  EXTERN inicio2
    36                                  
    37                                  EXTERN COPY_INIT
    38                                  EXTERN POLLING
    39                                  
    40                                  EXTERN __INICIO_RAM_RUTINAS
    41                                  EXTERN __INICIO_ROM_RUTINAS
    42                                  EXTERN __INICIO_ROM
    43                                  EXTERN __INICIO_RAM_NUCLEO
    44                                  EXTERN __INICIO_ROM_NUCLEO
    45                                  
    46                                  EXTERN __INICIO_RAM_SYS_TABLES
    47                                  EXTERN __INICIO_ROM_SYS_TABLES
    48                                  EXTERN __LONGITUD_SYS_TABLES
    49                                  
    50                                  EXTERN __INICIO_RAM_ISR
    51                                  EXTERN __INICIO_ROM_ISR
    52                                  
    53                                  EXTERN __INICIO_ROM_TABLA_DIGITOS 
    54                                  EXTERN __INICIO_RAM_TABLA_DIGITOS 
    55                                  
    56                                  EXTERN __INICIO_RAM_TAREA_1
    57                                  EXTERN __INICIO_ROM_TAREA_1
    58                                  
    59                                  EXTERN __INICIO_ROM_DATOS 
    60                                  EXTERN __INICIO_RAM_DATOS
    61                                  
    62                                  
    63                                  
    64                                  EXTERN __LONGITUD_RUTINAS
    65                                  EXTERN __LONGITUD_ROM
    66                                  EXTERN __LONGITUD_ISR
    67                                  EXTERN __LONGITUD_DATOS
    68                                  EXTERN __LONGITUD_TAREA_1
    69                                  
    70                                  GLOBAL _CONTADOR_TECLAS
    71                                  GLOBAL _ENTRADA_TABLA
    72                                  GLOBAL _CONTADOR_TECLAS_BYTES
    73                                  GLOBAL _CONTADOR_TIMER
    74                                  GLOBAL _NUMERO_TOTAL
    75                                  GLOBAL _BUFFER_NUMERO_PANTALLA
    76                                  GLOBAL _flag_int_timer
    77                                  
    78                                  GLOBAL FIN
    79                                  
    80                                  EXTERN img_idtr
    81                                  EXTERN img_gdtr_32
    82                                  
    83                                  EXTERN cs_sel_32
    84                                  EXTERN ds_sel_32
    85                                  
    86                                  EXTERN LECTURA_TECLA
    87                                  EXTERN CARGAR_TABLA
    88                                  EXTERN CARGAR_TABLA_2
    89                                  EXTERN SUMA_TABLA_DIGITOS
    90                                  
    91                                  GLOBAL cs_sel
    92                                  GLOBAL ds_sel
    93                                  GLOBAL _flag_int_teclado
    94                                  GLOBAL _flag_16_TECLAS
    95                                  
    96                                  
    97                                  EXTERN _pic_configure
    98                                  EXTERN _pit_configure
    99                                  EXTERN _bios_init
   100                                  EXTERN MOSTRAR_PANTALLA
   101                                  EXTERN BUFFER_DOBLE_OFFS
   102                                  ;----------------------------------------------------------------------------------
   103                                  %define TECLA_0  0x0B
   104                                  %define TECLA_1  0x02
   105                                  %define TECLA_2  0x03
   106                                  %define TECLA_3  0x04
   107                                  %define TECLA_4  0x05
   108                                  %define TECLA_5  0x06
   109                                  %define TECLA_6  0x07
   110                                  %define TECLA_7  0x08
   111                                  %define TECLA_8  0x09
   112                                  %define TECLA_9  0x0A
   113                                  %define TECLA_A  0x1E
   114                                  %define TECLA_B  0x30
   115                                  %define TECLA_C  0x2E
   116                                  %define TECLA_D  0x20
   117                                  %define TECLA_E  0x12
   118                                  %define TECLA_F  0x21
   119                                  %define TECLA_ENTER  0x1C
   120                                  
   121                                  
   122                                  
   123                                  
   124                                  %define BKP xchg bx,bx
   125                                  
   126                                  ;----------------------------------------------------------------------------------
   127                                  
   128                                  section .reset
   129                                  arranque:
   130                                  USE16
   131 00000000 B80000                  mov ax,0
   132 00000003 FFE0                    jmp ax
   133                                  ;salto a inicio16
   134 00000005 00<rept>                times 16-($-arranque) db 0
   135                                  
   136                                  section .init
   137                                  
   138 00000000 EB1E                    jmp inicio
   139                                  
   140                                  gdt:
   141 00000002 0000000000000000                  db 0,0,0,0,0,0,0,0  ;Descriptor nulo
   142                                  ds_sel    equ $-gdt
   143 0000000A FFFF00000092CF00                  db 0xFF, 0xFF, 0, 0, 0, 0x92, 0xCF, 0
   144                                  cs_sel    equ $-gdt
   145 00000012 FFFF0000009ACF00                  db 0xFF, 0xFF, 0, 0, 0, 0x9A, 0xCF, 0
   146                                  
   147                                  long_gdt equ $-gdt
   148                                  
   149                                  
   150                                  img_gdtr:
   151 0000001A 1700                        dw long_gdt-1
   152 0000001C [02000000]                  dd gdt
   153                                  
   154                                  
   155                                  
   156                                  inicio:
   157 00000020 FA                        cli                ;Deshabilito interrupciones
   158 00000021 E8(0000)                  call _bios_init
   159 00000024 66                        db 0x66            ;Requerido para direcciones mayores
   160 00000025 2E0F0116[1A00]            lgdt [cs:img_gdtr] ;que 0x00FFFFFFF. 
   161 0000002B 0F20C0                    mov eax,cr0        ;Habiltación bit de modo protegido. 
   162 0000002E 6683C801                  or eax,1
   163 00000032 0F22C0                    mov cr0,eax
   164                                   	
   165 00000035 66EA[3D000000]1000       jmp dword cs_sel:modo_proteg
   166                                  
   167                                  
   168                                   
   169                                  USE32
   170                                  modo_proteg:
   171                                    ;BKP
   172                                  
   173 0000003D 66B80800                  mov ax,ds_sel
   174 00000041 8ED8                      mov ds,ax
   175 00000043 8ED0                      mov ss,ax
   176 00000045 BC[00000000]              mov esp,__FIN_PILA
   177                                  
   178                                  
   179 0000004A 68[00000000]              push __INICIO_ROM_RUTINAS
   180 0000004F 68[00000000]              push __INICIO_RAM_RUTINAS
   181 00000054 68[00000000]              push __LONGITUD_RUTINAS
   182                                  
   183 00000059 E8(00000000)              call __INICIO_ROM_RUTINAS ;Copio la funcion copy en RAM a mano
   184                                  
   185 0000005E 58                        pop eax
   186 0000005F 58                        pop eax
   187 00000060 58                        pop eax
   188                                  
   189                                  
   190                                  
   191 00000061 68[00000000]              push __INICIO_ROM_NUCLEO
   192 00000066 68[00000000]              push __INICIO_RAM_NUCLEO
   193 0000006B 68[00000000]              push __LONGITUD_ROM
   194                                  
   195                                  
   196 00000070 E8(00000000)              call COPY_INIT            ;Copio toda la ROM en RAM desde
   197 00000075 58                        pop eax                   ;funcion copy en RAM
   198 00000076 58                        pop eax
   199 00000077 58                        pop eax
   200                                  
   201                                  
   202                                  
   203                                  
   204 00000078 E9(00000000)              jmp nucleos
   205                                   
   206                                  
   207                                   ;----------------------------------------------------------------------
   208                                  
   209                                  section .nucleo
   210                                  
   211                                  
   212                                  nucleos:   
   213                                  
   214 00000000 68[00000000]              push __INICIO_ROM_ISR
   215 00000005 68[00000000]              push __INICIO_RAM_ISR
   216 0000000A 68[00000000]              push __LONGITUD_ISR 
   217                                  
   218 0000000F E8(00000000)              call COPY_INIT
   219                                    
   220 00000014 58                        pop eax
   221 00000015 58                        pop eax
   222 00000016 58                        pop eax
   223                                  
   224                                  
   225                                  
   226                                  
   227 00000017 68[00000000]              push __INICIO_ROM_SYS_TABLES
   228 0000001C 68[00000000]              push __INICIO_RAM_SYS_TABLES
   229 00000021 68[00000000]              push __LONGITUD_SYS_TABLES
   230                                  
   231 00000026 E8(00000000)              call COPY_INIT              ;Copio la GDT e IDT a sys_tables(RAM)
   232                                      
   233 0000002B 58                        pop eax
   234 0000002C 58                        pop eax
   235 0000002D 58                        pop eax
   236                                  
   237 0000002E 68[00000000]              push __INICIO_ROM_TAREA_1
   238 00000033 68[00000000]              push __INICIO_RAM_TAREA_1
   239 00000038 68[00000000]              push __LONGITUD_TAREA_1
   240                                  
   241 0000003D E8(00000000)              call COPY_INIT              ;Copio la tarea_1 a (RAM)
   242                                      
   243 00000042 58                        pop eax
   244 00000043 58                        pop eax
   245 00000044 58                        pop eax
   246                                  
   247                                  
   248                                  
   249 00000045 68[00000000]              push __INICIO_ROM_DATOS
   250 0000004A 68[00000000]              push __INICIO_RAM_DATOS
   251 0000004F 68[00000000]              push __LONGITUD_DATOS
   252                                  
   253 00000054 E8(00000000)              call COPY_INIT                ;Copio seccion de datos. Contador de la tabla de digitos
   254                                    
   255 00000059 58                        pop eax
   256 0000005A 58                        pop eax
   257 0000005B 58                        pop eax
   258                                  
   259 0000005C 2E0F0115[00000000]      lgdt [cs:img_gdtr_32] 
   260                                  
   261 00000064 0F011D[00000000]        lidt [img_idtr]   
   262                                  
   263 0000006B E8(00000000)            call _pic_configure
   264 00000070 E8(00000000)            call _pit_configure
   265                                  
   266 00000075 FB                      sti
   267                                  ;xchg bx, bx
   268                                  
   269                                  
   270                                  WHILE:
   271                                        
   272                                        
   273 00000076 66A1[28000000]                mov ax,[_flag_int_timer]          ; Me fijo si vencio timer
   274 0000007C 6683F801                      cmp ax, 0x01      
   275 00000080 740F                          jz Cien_ms
   276                                  
   277 00000082 668B1D[18000000]              mov bx, [_flag_int_teclado]       ; Me fijo si hubo tecla
   278 00000089 6683FB01                      cmp bx, 0x01
   279 0000008D 743C                          jz INT_TECLA
   280 0000008F EBE5                          jmp WHILE
   281                                  
   282                                    Cien_ms:
   283 00000091 66B80000                      mov ax,0x00
   284 00000095 66A3[28000000]                mov [_flag_int_timer], ax         ; Reinicio el flag de timer
   285                                  
   286 0000009B 66A1[30000000]                mov ax, [_CONTADOR_TIMER]         
   287 000000A1 6683F80A                      cmp ax, 0x0A                      ; Me fijo si el timer vencio 10 veces 
   288 000000A5 740D                          jz VENCE_TIMER
   289                                  
   290 000000A7 A1[30000000]                  mov eax,[_CONTADOR_TIMER]         ; Guardo cada 10 veces la base de tiempo
   291 000000AC 40                            inc eax
   292 000000AD A3[30000000]                  mov [_CONTADOR_TIMER], eax
   293 000000B2 EBC2                          jmp WHILE
   294                                  
   295                                    VENCE_TIMER:
   296                                  
   297 000000B4 66B80000                    mov ax, 0x0
   298 000000B8 66A3[30000000]              mov [_CONTADOR_TIMER], ax
   299 000000BE A1[38000000]                mov eax,[_CONTADOR_TIMER_2]
   300 000000C3 40                          inc eax
   301                                      
   302 000000C4 A3[38000000]                mov [_CONTADOR_TIMER_2], eax
   303 000000C9 EBAB                        JMP WHILE
   304                                  
   305                                  
   306                                    INT_TECLA:
   307                                  
   308 000000CB E8(00000000)                  call LECTURA_TECLA
   309                                        
   310                                  
   311                                      T_0:
   312 000000D0 3C0B                          cmp al, TECLA_0
   313 000000D2 B300                          mov bl, 0x0 ; 
   314 000000D4 7460                          jz GUARDADO_HEXA
   315                                  
   316                                      T_1:
   317 000000D6 3C02                          cmp al, TECLA_1
   318 000000D8 B301                          mov bl, 0x1 ;  ; 
   319 000000DA 745A                          jz GUARDADO_HEXA
   320                                  
   321                                      T_2:
   322 000000DC 3C03                          cmp al, TECLA_2 ; 
   323 000000DE B302                          mov bl, 0x2 ; 
   324 000000E0 7454                          jz GUARDADO_HEXA
   325                                  
   326                                      T_3:
   327 000000E2 3C04                          cmp al, TECLA_3 ; 
   328 000000E4 B303                          mov bl, 0x3
   329 000000E6 744E                          jz GUARDADO_HEXA   
   330                                  
   331                                      T_4:
   332 000000E8 3C05                          cmp al, TECLA_4
   333 000000EA B304                          mov bl, 0x4 ; 
   334 000000EC 7448                          jz GUARDADO_HEXA 
   335                                  
   336                                      T_5:
   337 000000EE 3C06                          cmp al, TECLA_5 ; 
   338 000000F0 B305                          mov bl, 0x5
   339 000000F2 7442                          jz GUARDADO_HEXA   
   340                                  
   341                                      T_6:
   342 000000F4 3C07                          cmp al, TECLA_6
   343 000000F6 B306                          mov bl, 0x6 ; 
   344 000000F8 743C                          jz GUARDADO_HEXA   
   345                                  
   346                                      T_7:
   347 000000FA 3C08                          cmp al, TECLA_7 ; 
   348 000000FC B307                          mov bl, 0x7
   349 000000FE 7436                          jz GUARDADO_HEXA     
   350                                      
   351                                      T_8:
   352 00000100 3C09                          cmp al, TECLA_8
   353 00000102 B308                          mov bl, 0x8 ; 
   354 00000104 7430                          jz GUARDADO_HEXA
   355                                      
   356                                      T_9:
   357 00000106 3C0A                          cmp al, TECLA_9 
   358 00000108 B309                          mov bl, 0x9 
   359 0000010A 742A                          jz GUARDADO_HEXA  
   360                                      
   361                                      T_A:
   362 0000010C 3C1E                          cmp al, TECLA_A ; 
   363 0000010E B30A                          mov bl, 0xA
   364 00000110 7424                          jz GUARDADO_HEXA
   365                                      
   366                                      T_B:
   367 00000112 3C30                          cmp al, TECLA_B 
   368 00000114 B30B                          mov bl, 0xB 
   369 00000116 741E                          jz GUARDADO_HEXA  
   370                                      
   371                                      T_C:
   372 00000118 3C2E                          cmp al, TECLA_C ; 
   373 0000011A B30C                          mov bl, 0xC
   374 0000011C 7418                          jz GUARDADO_HEXA 
   375                                      
   376                                      T_D:
   377 0000011E 3C20                          cmp al, TECLA_D 
   378 00000120 B30D                          mov bl, 0xD
   379 00000122 7412                          jz GUARDADO_HEXA 
   380                                      
   381                                      T_E:
   382 00000124 3C12                          cmp al, TECLA_E 
   383 00000126 B30E                          mov bl, 0xE
   384 00000128 740C                          jz GUARDADO_HEXA 
   385                                  
   386                                      T_F:
   387 0000012A 3C21                          cmp al, TECLA_F 
   388 0000012C B30F                          mov bl, 0xF
   389 0000012E 7406                          jz GUARDADO_HEXA 
   390                                  
   391                                      T_ENTER:
   392 00000130 3C1C                          cmp al, TECLA_ENTER ; 
   393 00000132 741D                          jz FIN
   394                                  
   395                                  
   396 00000134 EB0B                      jmp SIGUIENTE
   397                                  
   398                                  
   399                                      GUARDADO_HEXA:
   400 00000136 6653                          push bx
   401 00000138 E8(00000000)                  call CARGAR_TABLA
   402 0000013D 665B                          pop bx
   403 0000013F EB00                          jmp SIGUIENTE
   404                                  
   405                                  
   406                                      SIGUIENTE:
   407                                      
   408 00000141 66B80000                      mov ax, 0x0
   409 00000145 66A3[18000000]                mov [_flag_int_teclado], ax
   410 0000014B FB                            sti
   411 0000014C E925FFFFFF                    jmp WHILE
   412                                  
   413                                  
   414                                  
   415                                  
   416                                  
   417                                      FIN:
   418                                        
   419 00000151 803D[00000000]00              cmp byte[_CONTADOR_TECLAS],0x0  ;Me fijo si estoy parado en la primer pocision del vector
   420 00000158 7402                          jz CASO_TECLA_ENTER_SOLA
   421 0000015A EB09                          JMP CASO_NORMAL
   422                                  
   423                                  
   424                                        CASO_TECLA_ENTER_SOLA:
   425 0000015C 803D[20000000]00              cmp byte[_flag_16_TECLAS],0x0    ;Me fijo si la cantidad de teclas fue  realmente 0 o multiplo de 16
   426 00000163 7414                          jz RESET                         ;Si fue 0, es porque solo se presiono la tecla ENTER
   427                                  
   428                                        CASO_NORMAL:
   429                                        ;BKP
   430 00000165 E8(00000000)                  call CARGAR_TABLA_2
   431 0000016A A3[40000000]                  mov [_NUMERO_TOTAL], eax
   432 0000016F E8(00000000)                  call SUMA_TABLA_DIGITOS
   433                                        ;BKP
   434 00000174 E8(00000000)                  call MOSTRAR_PANTALLA
   435                                        ;BKP
   436                                  
   437                                        RESET:
   438 00000179 66B80000                      mov ax, 0x0
   439 0000017D 66A3[18000000]                mov [_flag_int_teclado], ax     ;Reinicio flag de teclado 
   440 00000183 FB                            sti                             ;Habilito interrupciones nuevamente
   441                                  
   442                                  
   443                                  
   444 00000184 E9EDFEFFFF              jmp WHILE
   445                                  
   446                                  
   447                                  
   448                                  
   449                                  
   450                                  
   451                                  ;----------------------------------------------------------------------
   452                                  section .datos
   453                                  
   454 00000000 0000000000000000        _CONTADOR_TECLAS: dq 0x00       ;Contador de teclas validas presionadas
   455 00000008 0000000000000000        _CONTADOR_TECLAS_BYTES: dq 0x0  ;Contador para tomar de a dos hexas, y ponerlos en un byte
   456 00000010 [1000000000000000]      _ENTRADA_TABLA: dq __INICIO_RAM_TABLA_DIGITOS + 0x10 ;Puntero a la primera entrada de tabla libre
   456          ******************       warning: 64-bit unsigned relocation zero-extended from 32 bits
 [-w+zext-reloc]
   457 00000018 0000000000000000        _flag_int_teclado: dq 0x00      ;Flag si interrupio el teclado
   458 00000020 0000000000000000        _flag_16_TECLAS: dq 0x00        ;Flag si se presionaron mas de 16 teclas
   459 00000028 0000000000000000        _flag_int_timer: dq 0x00
   460 00000030 0000000000000000        _CONTADOR_TIMER: dq 0x00        ;Contador de interrupciones del PIT cada 10ms
   461 00000038 0000000000000000        _CONTADOR_TIMER_2: dq 0x00      ;Contador de interrupciones del PIT cada 100ms
   462 00000040 000000000000000000-     _NUMERO_TOTAL: dq 0x00 ,0x00
   462 00000049 00000000000000     
   463 00000050 0000000000000000        _BUFFER_NUMERO_PANTALLA: dq 0x00
   464                                  
