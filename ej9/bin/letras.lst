     1                                  ; Mostrar en pantalla seis letras de 'A' a 'F' que se muevan por la pantalla.
     2                                  ; Tanto la posición inicial como la velocidad (fija) debe ser aleatoria.
     3                                  ; Al llegar al extremo de la pantalla, la letra debe rebotar.
     4                                  ; El código debe estar en modo protegido con segmentos de 32 bits.
     5                                  
     6                                  ; Hecho por Dario Alpern el 13/04/2018
     7                                  
     8                                  
     9                                  
    10                                  
    11                                  
    12                                  
    13                                  
    14                                  
    15                                  
    16                                  section .rutinas
    17                                  
    18                                  ;%include "init_pci.inc"
    19                                  
    20                                  
    21                                  CANT_LETRAS   equ 6
    22                                  CANT_FILAS    equ 25
    23                                  COLS_POR_FILA equ 80
    24                                  MAX_VELOCIDAD equ 64 ;Un cuarto de fila o columna por tick de reloj.      
    25                                  
    26                                  BUFFER_DOBLE_OFFS EQU 0x20000
    27                                  
    28                                  
    29                                  inicio:
    30                                  
    31                                  
    32                                  ; El orden queda little-endian para usar menos instrucciones, ya que 
    33                                  ; los procesadores Intel usan little-endian.
    34                                  OFFS_FILA       EQU 0               ;Fila (fracción, luego entero)
    35                                  OFFS_COLUMNA    EQU OFFS_FILA+2     ;Columna (fracción, luego entero)
    36                                  OFFS_DELTAX     EQU OFFS_COLUMNA+2  ;Delta X (fracción, luego entero)
    37                                  OFFS_DELTAY     EQU OFFS_DELTAX+2   ;Delta Y (fracción, luego entero)
    38                                  LONG_ESTRUCTURA_POR_LETRA EQU OFFS_DELTAY+2
    39                                  
    40                                  VARS_LETRAS equ BUFFER_DOBLE_OFFS+2*CANT_FILAS*COLS_POR_FILA
    41                                  semilla equ VARS_LETRAS+CANT_LETRAS*LONG_ESTRUCTURA_POR_LETRA
    42                                  FLAG_INT equ semilla + 4
    43                                  BUFFER_VIDEO equ 0xb8000
    44                                  
    45                                  
    46                                  
    47 00000000 A3D00F0200                   mov [semilla], eax
    48                                  ;Inicializar el array de estructuras correspondiente a cada letra.
    49 00000005 BBA00F0200                   mov ebx, VARS_LETRAS   ;Offset (dirección efectiva) del array.
    50 0000000A B906000000                   mov ecx, CANT_LETRAS   ;Cantidad de elementos del array.
    51                                  ciclo_init:
    52 0000000F BE00190000                   mov esi,CANT_FILAS*256
    53                                       ;call nro_aleatorio
    54 00000014 668913                       mov [ebx+OFFS_FILA],dx    ;Fracción y entero del número de fila.
    55 00000017 BE00500000                   mov esi,COLS_POR_FILA*256
    56                                       ;call nro_aleatorio
    57 0000001C 66895302                     mov [ebx+OFFS_COLUMNA],dx ;Fracción y entero del número de columna.
    58 00000020 BE80000000                   mov esi,MAX_VELOCIDAD*2
    59                                       ;call nro_aleatorio     
    60 00000025 83EA40                       sub edx,MAX_VELOCIDAD     ;Convertir a rango -MAX_VELOCIDAD a MAX_VELOCIDAD
    61 00000028 66895304                     mov [ebx+OFFS_DELTAX],dx  ;Fracción y entero de la velocidad horizontal.
    62 0000002C BE80000000                   mov esi,MAX_VELOCIDAD*2
    63                                       ;call nro_aleatorio     
    64 00000031 83EA40                       sub edx,MAX_VELOCIDAD     ;Convertir a rango -MAX_VELOCIDAD a MAX_VELOCIDAD
    65 00000034 66895306                     mov [ebx+OFFS_DELTAY],dx  ;Fracción y entero de la velocidad vertical.
    66                                       
    67 00000038 83C308                       add ebx,LONG_ESTRUCTURA_POR_LETRA ;Apuntar al siguiente elemento del array.
    68 0000003B E2D2                         loop ciclo_init ;decrementa ecx y salta si no es 0
    69                                      ;En instrcucciones de cadena:
    70                                      ;Instruccion std -> decrementa puntero (flag dirección <- 1).
    71                                      ;Instruccion cld -> incrementa puntero (flag dirección <- 0).
    72                                  ;Programar el timer cero para que interrumpa 18,2 veces por segundo.
    73 0000003D B036                         mov al, 0x36              ;Timer counter cero (bits 7-6).
    74 0000003F E643                         out 0x43, al
    75 00000041 B000                         mov al,0
    76 00000043 E640                         out 0x40, al              ;Escribir el byte menos significativo de la cuenta.
    77 00000045 E640                         out 0x40, al              ;Escribir el byte más significativo de la cuenta.
    78 00000047 FB                           sti                       ;Habilitar interrupciones.
    79                                  
    80                                  ciclo_mostrar_letras:
    81                                  ;Hallar ubicación de la letra en el buffer doble: 2*(fila*COLS_POR_FILA+columna).
    82 00000048 B050                         mov al,COLS_POR_FILA
    83 0000004A F66301                       mul byte [ebx+OFFS_FILA+1]     ;Producto en AX.
    84 0000004D 024303                       add al, [ebx+OFFS_COLUMNA+1]   ;Otra posibilidad (movzx dx, byte[ebx+2])
    85 00000050 80D400                       adc ah, 0                      ;add ax,dx (mov con zero extend)
    86 00000053 0FB7C0                       movzx eax, ax                  ;Completar producto a 32 bits.
    87 00000056 88940000000200               mov [BUFFER_DOBLE_OFFS+eax*2],dl ;Poner la letra en el buffer doble.
    88 0000005D 83C308                       add ebx,LONG_ESTRUCTURA_POR_LETRA ;Apuntar al siguiente elemento del array.
    89 00000060 FEC2                         inc dl                         ;Indicar siguiente letra (en ASCII).
    90 00000062 E2E4                         loop ciclo_mostrar_letras      ;Cerrar ciclo (decrementar ECX y saltar si no es cero).
    91                                  ;Copiar buffer doble a buffer de video.
    92 00000064 BE00000200                   mov esi, BUFFER_DOBLE_OFFS     ;Puntero origen de datos.
    93 00000069 BF00800B00                   mov edi, BUFFER_VIDEO          ;Puntero destino de datos.
    94 0000006E B9D0070000                   mov ecx, COLS_POR_FILA*CANT_FILAS 
    95 00000073 F366A5                       rep movsw          ;Operatoria de esta instrcción de cadena:
    96                                                          ;WORD [ES:EDI] <- WORD [DS:ESI]
    97                                                          ;ESI <- ESI +/- 2 (signo según flag de dirección)
    98                                                          ;EDI <- EDI +/- 2 (signo según flag de dirección)
    99                                                          ;ECX <- ECX - 1
   100                                                          ;Repite instrucción si ECX es distinto de cero.
   101                                  ;Actualizar posición de las letras.
   102 00000076 BBA00F0200                   mov ebx, VARS_LETRAS
   103 0000007B B906000000                   mov ecx, CANT_LETRAS
   104                                  actualizar_posic_letras:
   105                                  ;Actualizar columna.
   106 00000080 668B4302                     mov ax,[EBX+OFFS_COLUMNA]   ;Obtener columna.
   107 00000084 66034304                     add ax,[EBX+OFFS_DELTAX]    ;Sumar velocidad horizontal.
   108 00000088 663D0050                     cmp ax,COLS_POR_FILA * 256  ;Verificar si la letra llegó al tope.
   109 0000008C 720C                         jb guardar_columna          ;Saltar si no es así.
   110 0000008E 66F75B04                     neg word [EBX+OFFS_DELTAX]  ;Cambiar signo de la velocidad horizontal.
   111 00000092 668B4302                     mov ax,[EBX+OFFS_COLUMNA]   ;Obtener colummna.
   112 00000096 66034304                     add ax,[EBX+OFFS_DELTAX]    ;Sumar velocidad horizontal.
   113                                  guardar_columna:
   114 0000009A 66894302                     mov [EBX+OFFS_COLUMNA],ax   ;Guardar columna
   115                                  ;Actualizar fila.
   116 0000009E 668B03                       mov ax,[EBX+OFFS_FILA]      ;Obtener fila.
   117 000000A1 66034306                     add ax,[EBX+OFFS_DELTAY]    ;Sumar velocidad vertical.
   118 000000A5 663D0019                     cmp ax,CANT_FILAS * 256     ;Verificar si la letra llegó al tope.
   119 000000A9 720B                         jb guardar_fila             ;Saltar si no es así.
   120 000000AB 66F75B06                     neg word [EBX+OFFS_DELTAY]  ;Cambiar signo de la velocidad vertical.
   121 000000AF 668B03                       mov ax,[EBX+OFFS_FILA]      ;Obtener fila.
   122 000000B2 66034306                     add ax,[EBX+OFFS_DELTAY]    ;Sumar velocidad vertical.
   123                                  guardar_fila:
   124 000000B6 668903                       mov [EBX+OFFS_FILA],ax      ;Guardar fila.
   125                                  
   126 000000B9 83C308                       add ebx,LONG_ESTRUCTURA_POR_LETRA ;Apuntar al siguiente elemento del array.
   127 000000BC E2C2                         loop actualizar_posic_letras  ;Cerrar ciclo (decrementar ECX y saltar si no es cero).
   128                                       
   129                                  FIN_LOOP:
   130 000000BE 6687DB                       xchg bx, bx
   131                                       ;cmp byte [FLAG_INT], 1        ;Esperar a que llegue el tick de reloj.
   132                                       ;jne FIN_LOOP
   133                                       ;mov byte [FLAG_INT], 0        ;Apagar el flag para usarlo en la sig. iteración.
   134                                  
