     1                                  ; Mostrar en pantalla seis letras de 'A' a 'F' que se muevan por la pantalla.
     2                                  ; Tanto la posición inicial como la velocidad (fija) debe ser aleatoria.
     3                                  ; Al llegar al extremo de la pantalla, la letra debe rebotar.
     4                                  ; El código debe estar en modo protegido con segmentos de 32 bits.
     5                                  
     6                                  ; Hecho por Dario Alpern el 13/04/2018
     7                                  
     8                                  GLOBAL inicio2
     9                                  GLOBAL BUFFER_DOBLE_OFFS
    10                                  section .rutinas
    11                                  
    12                                  
    13                                  CANT_LETRAS   equ 6
    14                                  CANT_FILAS    equ 25
    15                                  COLS_POR_FILA equ 80
    16                                  MAX_VELOCIDAD equ 64 ;Un cuarto de fila o columna por tick de reloj.      
    17                                  
    18                                  BUFFER_DOBLE_OFFS EQU 0x20000
    19                                  
    20                                  
    21                                  inicio2:
    22                                  
    23                                  
    24                                  ; El orden queda little-endian para usar menos instrucciones, ya que 
    25                                  ; los procesadores Intel usan little-endian.
    26                                  OFFS_FILA       EQU 0               ;Fila (fracción, luego entero)
    27                                  OFFS_COLUMNA    EQU OFFS_FILA+2     ;Columna (fracción, luego entero)
    28                                  OFFS_DELTAX     EQU OFFS_COLUMNA+2  ;Delta X (fracción, luego entero)
    29                                  OFFS_DELTAY     EQU OFFS_DELTAX+2   ;Delta Y (fracción, luego entero)
    30                                  LONG_ESTRUCTURA_POR_LETRA EQU OFFS_DELTAY+2
    31                                  
    32                                  VARS_LETRAS equ BUFFER_DOBLE_OFFS+2*CANT_FILAS*COLS_POR_FILA
    33                                  semilla equ VARS_LETRAS+CANT_LETRAS*LONG_ESTRUCTURA_POR_LETRA
    34                                  FLAG_INT equ semilla + 4
    35                                  BUFFER_VIDEO equ 0xb8000
    36                                  
    37                                  
    38                                  
    39                                  
    40                                  
    41 00000000 A3D00F0200                   mov [semilla], eax
    42                                  ;Inicializar el array de estructuras correspondiente a cada letra.
    43 00000005 BBA00F0200                   mov ebx, VARS_LETRAS   ;Offset (dirección efectiva) del array.
    44 0000000A B906000000                   mov ecx, CANT_LETRAS   ;Cantidad de elementos del array.
    45                                  ciclo_init:
    46 0000000F BE00190000                   mov esi,CANT_FILAS*256
    47 00000014 E8DA000000                   call nro_aleatorio
    48 00000019 668913                       mov [ebx+OFFS_FILA],dx    ;Fracción y entero del número de fila.
    49 0000001C BE00500000                   mov esi,COLS_POR_FILA*256
    50 00000021 E8CD000000                   call nro_aleatorio
    51 00000026 66895302                     mov [ebx+OFFS_COLUMNA],dx ;Fracción y entero del número de columna.
    52 0000002A BE80000000                   mov esi,MAX_VELOCIDAD*2
    53 0000002F E8BF000000                   call nro_aleatorio     
    54 00000034 83EA40                       sub edx,MAX_VELOCIDAD     ;Convertir a rango -MAX_VELOCIDAD a MAX_VELOCIDAD
    55 00000037 66895304                     mov [ebx+OFFS_DELTAX],dx  ;Fracción y entero de la velocidad horizontal.
    56 0000003B BE80000000                   mov esi,MAX_VELOCIDAD*2
    57 00000040 E8AE000000                   call nro_aleatorio     
    58 00000045 83EA40                       sub edx,MAX_VELOCIDAD     ;Convertir a rango -MAX_VELOCIDAD a MAX_VELOCIDAD
    59 00000048 66895306                     mov [ebx+OFFS_DELTAY],dx  ;Fracción y entero de la velocidad vertical.
    60                                       
    61 0000004C 83C308                       add ebx,LONG_ESTRUCTURA_POR_LETRA ;Apuntar al siguiente elemento del array.
    62 0000004F E2BE                         loop ciclo_init ;decrementa ecx y salta si no es 0
    63                                      ;En instrcucciones de cadena:
    64                                      ;Instruccion std -> decrementa puntero (flag dirección <- 1).
    65                                      ;Instruccion cld -> incrementa puntero (flag dirección <- 0).
    66                                  ;Programar el timer cero para que interrumpa 18,2 veces por segundo.
    67 00000051 B036                         mov al, 0x36              ;Timer counter cero (bits 7-6).
    68 00000053 E643                         out 0x43, al
    69 00000055 B000                         mov al,0
    70 00000057 E640                         out 0x40, al              ;Escribir el byte menos significativo de la cuenta.
    71 00000059 E640                         out 0x40, al              ;Escribir el byte más significativo de la cuenta.
    72 0000005B FB                           sti                       ;Habilitar interrupciones.
    73                                  
    74                                  
    75                                  ;Arranca ciclo principal de animación.    
    76                                  ciclo_anim:
    77                                  ;Borrar buffer doble.
    78 0000005C FC                           cld                ;La instrucción de cadena incrementa puntero.
    79 0000005D BF00000200                   mov edi, BUFFER_DOBLE_OFFS
    80 00000062 B9D0070000                   mov ecx, CANT_FILAS * COLS_POR_FILA
    81 00000067 66B82007                     mov ax, 0x0720     ;Espacio con atributo blanco sobre negro
    82 0000006B F366AB                       rep stosw          ;Operatoria de esta instrcción de cadena:
    83                                                          ;[ES:EDI] <- AX
    84                                                          ;EDI <- EDI +/- 2 (signo según flag de dirección)
    85                                                          ;ECX <- ECX - 1
    86                                                          ;Repite instrucción si ECX es distinto de cero.
    87                                  ;Poner las letras en el buffer doble.
    88 0000006E BBA00F0200                   mov ebx, VARS_LETRAS
    89 00000073 B906000000                   mov ecx, CANT_LETRAS
    90 00000078 B241                         mov dl,'A'
    91                                  
    92                                  ciclo_mostrar_letras:
    93                                  ;Hallar ubicación de la letra en el buffer doble: 2*(fila*COLS_POR_FILA+columna).
    94 0000007A B050                         mov al,COLS_POR_FILA
    95 0000007C F66301                       mul byte [ebx+OFFS_FILA+1]     ;Producto en AX.
    96 0000007F 024303                       add al, [ebx+OFFS_COLUMNA+1]   ;Otra posibilidad (movzx dx, byte[ebx+2])
    97 00000082 80D400                       adc ah, 0                      ;add ax,dx (mov con zero extend)
    98 00000085 0FB7C0                       movzx eax, ax                  ;Completar producto a 32 bits.
    99 00000088 88940000000200               mov [BUFFER_DOBLE_OFFS+eax*2],dl ;Poner la letra en el buffer doble.
   100 0000008F 83C308                       add ebx,LONG_ESTRUCTURA_POR_LETRA ;Apuntar al siguiente elemento del array.
   101 00000092 FEC2                         inc dl                         ;Indicar siguiente letra (en ASCII).
   102 00000094 E2E4                         loop ciclo_mostrar_letras      ;Cerrar ciclo (decrementar ECX y saltar si no es cero).
   103                                  ;Copiar buffer doble a buffer de video.
   104 00000096 BE00000200                   mov esi, BUFFER_DOBLE_OFFS     ;Puntero origen de datos.
   105 0000009B BF00800B00                   mov edi, BUFFER_VIDEO          ;Puntero destino de datos.
   106 000000A0 B9D0070000                   mov ecx, COLS_POR_FILA*CANT_FILAS 
   107 000000A5 F366A5                       rep movsw          ;Operatoria de esta instrcción de cadena:
   108                                                          ;WORD [ES:EDI] <- WORD [DS:ESI]
   109                                                          ;ESI <- ESI +/- 2 (signo según flag de dirección)
   110                                                          ;EDI <- EDI +/- 2 (signo según flag de dirección)
   111                                                          ;ECX <- ECX - 1
   112                                                          ;Repite instrucción si ECX es distinto de cero.
   113                                  ;Actualizar posición de las letras.
   114 000000A8 BBA00F0200                   mov ebx, VARS_LETRAS
   115 000000AD B906000000                   mov ecx, CANT_LETRAS
   116                                  actualizar_posic_letras:
   117                                  ;Actualizar columna.
   118 000000B2 668B4302                     mov ax,[EBX+OFFS_COLUMNA]   ;Obtener columna.
   119 000000B6 66034304                     add ax,[EBX+OFFS_DELTAX]    ;Sumar velocidad horizontal.
   120 000000BA 663D0050                     cmp ax,COLS_POR_FILA * 256  ;Verificar si la letra llegó al tope.
   121 000000BE 720C                         jb guardar_columna          ;Saltar si no es así.
   122 000000C0 66F75B04                     neg word [EBX+OFFS_DELTAX]  ;Cambiar signo de la velocidad horizontal.
   123 000000C4 668B4302                     mov ax,[EBX+OFFS_COLUMNA]   ;Obtener colummna.
   124 000000C8 66034304                     add ax,[EBX+OFFS_DELTAX]    ;Sumar velocidad horizontal.
   125                                  guardar_columna:
   126 000000CC 66894302                     mov [EBX+OFFS_COLUMNA],ax   ;Guardar columna
   127                                  ;Actualizar fila.
   128 000000D0 668B03                       mov ax,[EBX+OFFS_FILA]      ;Obtener fila.
   129 000000D3 66034306                     add ax,[EBX+OFFS_DELTAY]    ;Sumar velocidad vertical.
   130 000000D7 663D0019                     cmp ax,CANT_FILAS * 256     ;Verificar si la letra llegó al tope.
   131 000000DB 720B                         jb guardar_fila             ;Saltar si no es así.
   132 000000DD 66F75B06                     neg word [EBX+OFFS_DELTAY]  ;Cambiar signo de la velocidad vertical.
   133 000000E1 668B03                       mov ax,[EBX+OFFS_FILA]      ;Obtener fila.
   134 000000E4 66034306                     add ax,[EBX+OFFS_DELTAY]    ;Sumar velocidad vertical.
   135                                  guardar_fila:
   136 000000E8 668903                       mov [EBX+OFFS_FILA],ax      ;Guardar fila.
   137                                  
   138 000000EB 83C308                       add ebx,LONG_ESTRUCTURA_POR_LETRA ;Apuntar al siguiente elemento del array.
   139 000000EE E2C2                         loop actualizar_posic_letras  ;Cerrar ciclo (decrementar ECX y saltar si no es cero).
   140                                       
   141                                  FIN_LOOP:
   142 000000F0 6687DB                       xchg bx, bx
   143                                       ;cmp byte [FLAG_INT], 1        ;Esperar a que llegue el tick de reloj.
   144                                       ;jne FIN_LOOP
   145                                       ;mov byte [FLAG_INT], 0        ;Apagar el flag para usarlo en la sig. iteración.
   146                                  
   147                                  
   148                                  nro_aleatorio: 
   149 000000F3 B8A1B0B912                   mov eax, 314159265
   150 000000F8 F725D00F0200                 mul dword [semilla]    ;Producto en EDX:EAX
   151 000000FE 0567452301                   add eax, 0x1234567
   152 00000103 A3D00F0200                   mov [semilla], eax
   153 00000108 F7E6                         mul esi                ;Producto en EDX:EAX
   154 0000010A C3                           ret                    ;0 <= EDX < ESI como se pide.
