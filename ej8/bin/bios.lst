     1                                  ;Pasos del programa:
     2                                  ;-------------------
     3                                    ; Entro a modo_proteg
     4                                    ; Copio la funcion copy en rutinas(RAM)
     5                                    ; Llamo a la funcion copy para que me copie la ROM a nucleo (RAM)
     6                                  
     7                                    ; Espero interrupcion de tecla, mientras tengo el flag desactivado
     8                                    ; Cuando se produce la interrucion, la isr correspondiente activa el flag
     9                                    ; LLamo a la funcion LECTURA_TECLA y obtengo el codigo de la tecla
    10                                    ; En el main comparo cada caso, solo validando teclas con valores en hexa
    11                                    ; Si la tecla es valida, la guardo en un vector 16 posiciones, al comienzo de la tabla.
    12                                    ; Cuando se presiona la tecla enter, dejo de guardar teclas.
    13                                    ; Si el numero de teclas es 16 o mas, las guardo desde la primera como la MSB hasta la ultima.
    14                                    ; Si es menor a 16, hago lo mismo pero rellenando con ceros adelante.
    15                                    ; Previo compruebo si es par o impar.
    16                                    ; Voy guardando cada vector de teclas, ya acomodados uno debajo de otro en la tabla.
    17                                  
    18                                    ; NOTA: Las teclas las paso a traves de la pila 
    19                                    ; Falta ver caso que me presionen enter sin tocar otra tecla.
    20                                    ; Falta acomodar, si se excede de 16 teclas el orden de como se guarda
    21                                  ;-----------------------------------------------------------------------------------
    22                                  
    23                                  
    24                                  EXTERN __FIN_PILA
    25                                  EXTERN __SIZE_PILA
    26                                  
    27                                  EXTERN COPY_INIT
    28                                  EXTERN POLLING
    29                                  
    30                                  EXTERN __INICIO_RAM_RUTINAS
    31                                  EXTERN __INICIO_ROM_RUTINAS
    32                                  EXTERN __INICIO_ROM
    33                                  EXTERN __INICIO_RAM_NUCLEO
    34                                  EXTERN __INICIO_ROM_NUCLEO
    35                                  
    36                                  EXTERN __INICIO_RAM_SYS_TABLES
    37                                  EXTERN __INICIO_ROM_SYS_TABLES
    38                                  EXTERN __LONGITUD_SYS_TABLES
    39                                  
    40                                  EXTERN __INICIO_RAM_TECLADO_RUTINA
    41                                  EXTERN __INICIO_ROM_TECLADO_RUTINA
    42                                  
    43                                  EXTERN __INICIO_ROM_TABLA_DIGITOS 
    44                                  EXTERN __INICIO_RAM_TABLA_DIGITOS 
    45                                  
    46                                  EXTERN __INICIO_ROM_DATOS 
    47                                  EXTERN __INICIO_RAM_DATOS
    48                                  
    49                                  
    50                                  EXTERN __LONGITUD_RUTINAS
    51                                  EXTERN __LONGITUD_ROM
    52                                  EXTERN __LONGITUD_TECLADO_RUTINA
    53                                  EXTERN __LONGITUD_DATOS
    54                                  
    55                                  GLOBAL _CONTADOR_TECLAS
    56                                  GLOBAL _ENTRADA_TABLA
    57                                  GLOBAL _CONTADOR_TECLAS_BYTES
    58                                  GLOBAL _CONTADOR_TIMER
    59                                  
    60                                  GLOBAL FIN
    61                                  
    62                                  EXTERN img_idtr
    63                                  EXTERN img_gdtr_32
    64                                  
    65                                  EXTERN cs_sel_32
    66                                  EXTERN ds_sel_32
    67                                  
    68                                  EXTERN LECTURA_TECLA
    69                                  EXTERN CARGAR_TABLA
    70                                  EXTERN CARGAR_TABLA_2
    71                                  
    72                                  
    73                                  GLOBAL cs_sel
    74                                  GLOBAL ds_sel
    75                                  GLOBAL _flag_int_teclado
    76                                  GLOBAL _flag_16_TECLAS
    77                                  
    78                                  
    79                                  EXTERN _pic_configure
    80                                  EXTERN _pit_configure
    81                                  
    82                                  
    83                                  ;----------------------------------------------------------------------------------
    84                                  %define TECLA_0  0x0B
    85                                  %define TECLA_1  0x02
    86                                  %define TECLA_2  0x03
    87                                  %define TECLA_3  0x04
    88                                  %define TECLA_4  0x05
    89                                  %define TECLA_5  0x06
    90                                  %define TECLA_6  0x07
    91                                  %define TECLA_7  0x08
    92                                  %define TECLA_8  0x09
    93                                  %define TECLA_9  0x0A
    94                                  %define TECLA_A  0x1E
    95                                  %define TECLA_B  0x30
    96                                  %define TECLA_C  0x2E
    97                                  %define TECLA_D  0x20
    98                                  %define TECLA_E  0x12
    99                                  %define TECLA_F  0x21
   100                                  %define TECLA_ENTER  0x1C
   101                                  
   102                                  %define BKP xchg bx,bx
   103                                  
   104                                  ;----------------------------------------------------------------------------------
   105                                  
   106                                  
   107                                  
   108                                  section .reset
   109                                  arranque:
   110                                  USE16
   111 00000000 B80000                  mov ax,0
   112 00000003 FFE0                    jmp ax
   113                                  ;salto a inicio16
   114 00000005 00<rept>                times 16-($-arranque) db 0
   115                                  
   116                                  section .init
   117                                  
   118 00000000 EB1E                    jmp inicio
   119                                  
   120                                  gdt:
   121 00000002 0000000000000000                  db 0,0,0,0,0,0,0,0  ;Descriptor nulo
   122                                  ds_sel    equ $-gdt
   123 0000000A FFFF00000092CF00                  db 0xFF, 0xFF, 0, 0, 0, 0x92, 0xCF, 0
   124                                  cs_sel    equ $-gdt
   125 00000012 FFFF0000009ACF00                  db 0xFF, 0xFF, 0, 0, 0, 0x9A, 0xCF, 0
   126                                  
   127                                  long_gdt equ $-gdt
   128                                  
   129                                  
   130                                  img_gdtr:
   131 0000001A 1700                        dw long_gdt-1
   132 0000001C [02000000]                  dd gdt
   133                                  
   134                                  
   135                                  
   136                                  inicio:
   137 00000020 FA                        cli                ;Deshabilito interrupciones
   138 00000021 66                        db 0x66            ;Requerido para direcciones mayores
   139 00000022 2E0F0116[1A00]            lgdt [cs:img_gdtr] ;que 0x00FFFFFFF. 
   140 00000028 0F20C0                    mov eax,cr0        ;Habiltaci√≥n bit de modo protegido. 
   141 0000002B 6683C801                  or eax,1
   142 0000002F 0F22C0                    mov cr0,eax
   143                                   	
   144 00000032 66EA[3A000000]1000       jmp dword cs_sel:modo_proteg
   145                                  
   146                                  
   147                                   
   148                                  USE32
   149                                  modo_proteg:
   150 0000003A 6687DB                    xchg bx,bx
   151                                  
   152 0000003D 66B80800                  mov ax,ds_sel
   153 00000041 8ED8                      mov ds,ax
   154 00000043 8ED0                      mov ss,ax
   155 00000045 BC[00000000]              mov esp,__FIN_PILA
   156                                  
   157                                  
   158 0000004A 68[00000000]              push __INICIO_ROM_RUTINAS
   159 0000004F 68[00000000]              push __INICIO_RAM_RUTINAS
   160 00000054 68[00000000]              push __LONGITUD_RUTINAS
   161                                  
   162 00000059 E8(00000000)              call __INICIO_ROM_RUTINAS ;Copio la funcion copy en RAM a mano
   163                                  
   164 0000005E 58                        pop eax
   165 0000005F 58                        pop eax
   166 00000060 58                        pop eax
   167                                  
   168                                  
   169                                  
   170 00000061 68[00000000]              push __INICIO_ROM_NUCLEO
   171 00000066 68[00000000]              push __INICIO_RAM_NUCLEO
   172 0000006B 68[00000000]              push __LONGITUD_ROM
   173                                  
   174                                  
   175 00000070 E8(00000000)              call COPY_INIT            ;Copio toda la ROM en RAM desde
   176 00000075 58                        pop eax                   ;funcion copy en RAM
   177 00000076 58                        pop eax
   178 00000077 58                        pop eax
   179                                  
   180                                  
   181                                  
   182                                  
   183 00000078 E9(00000000)              jmp nucleos
   184                                   
   185                                  
   186                                   ;----------------------------------------------------------------------
   187                                  
   188                                  section .nucleo
   189                                  
   190                                  
   191                                  nucleos:   
   192                                  
   193 00000000 68[00000000]              push __INICIO_ROM_TECLADO_RUTINA
   194 00000005 68[00000000]              push __INICIO_RAM_TECLADO_RUTINA
   195 0000000A 68[00000000]              push __LONGITUD_TECLADO_RUTINA 
   196                                  
   197 0000000F E8(00000000)              call COPY_INIT
   198                                    
   199 00000014 58                        pop eax
   200 00000015 58                        pop eax
   201 00000016 58                        pop eax
   202                                  
   203                                  
   204                                  
   205                                  
   206 00000017 68[00000000]              push __INICIO_ROM_SYS_TABLES
   207 0000001C 68[00000000]              push __INICIO_RAM_SYS_TABLES
   208 00000021 68[00000000]              push __LONGITUD_SYS_TABLES
   209                                  
   210 00000026 E8(00000000)              call COPY_INIT              ;Copio la GDT e IDT a sys_tables(RAM)
   211                                      
   212 0000002B 58                        pop eax
   213 0000002C 58                        pop eax
   214 0000002D 58                        pop eax
   215                                  
   216                                  
   217                                  
   218 0000002E 68[00000000]              push __INICIO_ROM_DATOS
   219 00000033 68[00000000]              push __INICIO_RAM_DATOS
   220 00000038 68[00000000]              push __LONGITUD_DATOS
   221                                  
   222 0000003D E8(00000000)              call COPY_INIT                ;Copio seccion de datos. Contador de la tabla de digitos
   223                                    
   224 00000042 58                        pop eax
   225 00000043 58                        pop eax
   226 00000044 58                        pop eax
   227                                  
   228 00000045 2E0F0115[00000000]      lgdt [cs:img_gdtr_32] 
   229                                  
   230 0000004D 0F011D[00000000]        lidt [img_idtr]   
   231                                  
   232 00000054 E8(00000000)            call _pic_configure
   233 00000059 E8(00000000)            call _pit_configure
   234                                  
   235 0000005E FB                      sti
   236 0000005F 6687DB                  xchg bx, bx
   237                                  
   238                                  
   239                                  WHILE:
   240                                  
   241 00000062 668B1D[18000000]              mov bx, [_flag_int_teclado]
   242 00000069 6683FB00                      cmp bx, 0x00
   243 0000006D 74F3                          jz WHILE
   244                                  
   245                                  
   246 0000006F E8(00000000)                  call LECTURA_TECLA
   247                                        
   248                                  
   249                                      T_0:
   250 00000074 3C0B                          cmp al, TECLA_0
   251 00000076 B300                          mov bl, 0x0 ; 
   252 00000078 7460                          jz GUARDADO_HEXA
   253                                  
   254                                      T_1:
   255 0000007A 3C02                          cmp al, TECLA_1
   256 0000007C B301                          mov bl, 0x1 ;  ; 
   257 0000007E 745A                          jz GUARDADO_HEXA
   258                                  
   259                                      T_2:
   260 00000080 3C03                          cmp al, TECLA_2 ; 
   261 00000082 B302                          mov bl, 0x2 ; 
   262 00000084 7454                          jz GUARDADO_HEXA
   263                                  
   264                                      T_3:
   265 00000086 3C04                          cmp al, TECLA_3 ; 
   266 00000088 B303                          mov bl, 0x3
   267 0000008A 744E                          jz GUARDADO_HEXA   
   268                                  
   269                                      T_4:
   270 0000008C 3C05                          cmp al, TECLA_4
   271 0000008E B304                          mov bl, 0x4 ; 
   272 00000090 7448                          jz GUARDADO_HEXA 
   273                                  
   274                                      T_5:
   275 00000092 3C06                          cmp al, TECLA_5 ; 
   276 00000094 B305                          mov bl, 0x5
   277 00000096 7442                          jz GUARDADO_HEXA   
   278                                  
   279                                      T_6:
   280 00000098 3C07                          cmp al, TECLA_6
   281 0000009A B306                          mov bl, 0x6 ; 
   282 0000009C 743C                          jz GUARDADO_HEXA   
   283                                  
   284                                      T_7:
   285 0000009E 3C08                          cmp al, TECLA_7 ; 
   286 000000A0 B307                          mov bl, 0x7
   287 000000A2 7436                          jz GUARDADO_HEXA     
   288                                      
   289                                      T_8:
   290 000000A4 3C09                          cmp al, TECLA_8
   291 000000A6 B308                          mov bl, 0x8 ; 
   292 000000A8 7430                          jz GUARDADO_HEXA
   293                                      
   294                                      T_9:
   295 000000AA 3C0A                          cmp al, TECLA_9 
   296 000000AC B309                          mov bl, 0x9 
   297 000000AE 742A                          jz GUARDADO_HEXA  
   298                                      
   299                                      T_A:
   300 000000B0 3C1E                          cmp al, TECLA_A ; 
   301 000000B2 B30A                          mov bl, 0xA
   302 000000B4 7424                          jz GUARDADO_HEXA
   303                                      
   304                                      T_B:
   305 000000B6 3C30                          cmp al, TECLA_B 
   306 000000B8 B30B                          mov bl, 0xB 
   307 000000BA 741E                          jz GUARDADO_HEXA  
   308                                      
   309                                      T_C:
   310 000000BC 3C2E                          cmp al, TECLA_C ; 
   311 000000BE B30C                          mov bl, 0xC
   312 000000C0 7418                          jz GUARDADO_HEXA 
   313                                      
   314                                      T_D:
   315 000000C2 3C20                          cmp al, TECLA_D 
   316 000000C4 B30D                          mov bl, 0xD
   317 000000C6 7412                          jz GUARDADO_HEXA 
   318                                      
   319                                      T_E:
   320 000000C8 3C12                          cmp al, TECLA_E 
   321 000000CA B30E                          mov bl, 0xE
   322 000000CC 740C                          jz GUARDADO_HEXA 
   323                                  
   324                                      T_F:
   325 000000CE 3C21                          cmp al, TECLA_F 
   326 000000D0 B30F                          mov bl, 0xF
   327 000000D2 7406                          jz GUARDADO_HEXA 
   328                                  
   329                                      T_ENTER:
   330 000000D4 3C1C                          cmp al, TECLA_ENTER ; 
   331 000000D6 741D                          jz FIN
   332                                  
   333                                  
   334 000000D8 EB0B                      jmp SIGUIENTE
   335                                  
   336                                  
   337                                      GUARDADO_HEXA:
   338 000000DA 6653                          push bx
   339 000000DC E8(00000000)                  call CARGAR_TABLA
   340 000000E1 665B                          pop bx
   341 000000E3 EB00                          jmp SIGUIENTE
   342                                  
   343                                  
   344                                      SIGUIENTE:
   345                                      
   346 000000E5 66B80000                      mov ax, 0x0
   347 000000E9 66A3[18000000]                mov [_flag_int_teclado], ax
   348 000000EF FB                            sti
   349 000000F0 E96DFFFFFF                    jmp WHILE
   350                                  
   351                                  
   352                                      FIN:
   353 000000F5 E8(00000000)                  call CARGAR_TABLA_2
   354 000000FA 66B80000                      mov ax, 0x0
   355 000000FE 66A3[18000000]                mov [_flag_int_teclado], ax
   356 00000104 FB                            sti 
   357 00000105 6687DB                        BKP
   358                                  
   359                                  
   360 00000108 E955FFFFFF              jmp WHILE
   361                                  
   362                                  
   363                                  
   364                                  
   365                                  ;----------------------------------------------------------------------
   366                                  section .datos
   367                                  
   368 00000000 0000000000000000        _CONTADOR_TECLAS: dq 0x00       ;Contador de teclas validas presionadas
   369 00000008 0000000000000000        _CONTADOR_TECLAS_BYTES: dq 0x0  ;Contador para tomar de a dos hexas, y ponerlos en un byte
   370 00000010 [1000000000000000]      _ENTRADA_TABLA: dq __INICIO_RAM_TABLA_DIGITOS + 0x10 ;Puntero a la primera entrada de tabla libre
   370          ******************       warning: 64-bit unsigned relocation zero-extended from 32 bits
 [-w+zext-reloc]
   371 00000018 0000000000000000        _flag_int_teclado: dq 0x00      ;Flag si interrupio el teclado
   372 00000020 0000000000000000        _flag_16_TECLAS: dq 0x00        ;Flag si se presionaron mas de 16 teclas
   373 00000028 0000000000000000        _CONTADOR_TIMER: dq 0x00        ;Contador de interrupciones del PIT
   374                                  
   375                                   
   376                                  
